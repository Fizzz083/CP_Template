

//codeforces: 895C (https://codeforces.com/contest/895/problem/C)

//#pragma GCC optimize("03,unroll-loops")
//#pragma GCC target("avx,avx2,fma")

#include<bits/stdc++.h>
typedef long long ll;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ordered_set tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
#define pb           push_back
#define ff           first
#define ss           second
#define gcd(a, b)    __gcd(a, b)
#define lcm(a, b)    ((a)*((b)/gcd(a,b)))
#define all(v)       v.begin(),v.end()
#define rall(v)      v.rbegin(),v.rend()
#define lllim        2147483648
#define Pi           2*acos(0.0)
#define pii          pair<int,int>
#define pll 	     pair<ll,ll>
#define mem(a,b)     memset(a, b, sizeof(a))
#define fill_(a,b)   fill(a,a+n,b);
#define MOD          1000000007
#define fast_cin     ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define filein       freopen("input.txt","r", stdin)
#define D(x)         cerr << __LINE__ << ": " << #x << " = " << (x) << '\n'
#define case		 int t,cas=1;cin>>t;while(t--)
#define rep(i,a,n)   for(int i=a;i<n;i++)
#define rev(i,n,a)   for(int i=n;i>=a;i--)
#define sim 		 template<class T

/*------------------------------Graph Moves----------------------------*/
const int fx[]= {+1,-1,+0,+0};
const int fy[]= {+0,+0,+1,-1};
//const int fx[]= {+0,+0,+1,-1,-1,+1,-1,+1};  // Kings Move
//const int fy[]= {-1,+1,+0,+0,+1,+1,-1,-1}; // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move
/*---------------------------------------------------------------------*/


inline ll _gcd(ll a,ll b)
{
    a=abs(a);
    b=abs(b);
    if(!b) return a;
    return _gcd(b,a%b);
}
inline ll _pow(ll a,ll y)
{
    ll z=1;
    rep(i,1,y) {
        z*=a;
    }
    return z;
}
inline ll _lcm(ll a,ll b)
{
    a=abs(a);
    b=abs(b);
    return (a/_gcd(a,b))*b;
}
inline ll bigmod(ll n,ll m,ll mod)
{
    ll ret=1, a = n%mod ;
    while(m) {
        if(m&1)ret=(ret*a)%mod;
        m>>=1;
        a=(a*a)%mod;
    }
    ret%=mod;
    return ret;
}
sim > void ckmin(T& a, const T& b) {
    a= b < a? b:a;
}
sim > void ckmax(T& a, const T& b) {
    a= b > a? b:a;
}

///.............................input.................................///

sim > void readvec( std::vector<T>& v, const int n) {
    rep(i,0,n) {
        T p;
        std::cin>>p;
        v.pb(p);
    }
}
///...........................input end...............................///

using namespace std;
using namespace __gnu_pbds;

const int maxn=1e5+6;

///............................si()...................///

vector<int>pr;
bool mark[maxn];

void si()
{
    mem(mark,0);
    for(int i=4; i<maxn; i+=2) mark[i]=1;
    for(int i=3; i*i<maxn; i+=2)
    {
        if(!mark[i])
            for(int j=i*i; j<maxn; j+=2*i)
                mark[j]=1;
    }

    pr.pb(2);
    for(int i=3; i<maxn; i+=2)
        if(!mark[i])
            pr.pb(i);
}

///.................................Number theory end.........................///


ll mod=1e9+7;
ll fib[maxn];
ll finv[maxn];
ll inv[maxn];

void calc_fact_invfact()
{
    inv[1] = 1;
    for (int i = 2; i <maxn; ++i)
        inv[i] = (mod - ((mod/i)*inv[mod%i])%mod)%mod;

    fib[0]=1;
    finv[0]=1;
    for(ll i=1; i<maxn; i++)
    {
        fib[i]=(fib[i-1]*i)%mod;
        finv[i]=(finv[i-1]*inv[i])%mod;
    }
}

ll nCr(ll n,ll r)
{
    // cout<<n<<" "<<r<<endl;
    if(n<0LL || r<0LL || r>n) return 0LL;
    return (fib[n]*finv[r]%mod*finv[n-r]%mod)%mod;
}


///returns rank
template<typename ld>

int gauss(vector<vector<ld>>&a,vector<ld>&ans, ll mod)
{
    const double EPS = 1e-9;
    int n = a.size();///number of equations
    int m = a[0].size()-1;///number of variables

    //D(n);
    //D(m);
    vector<int>where(m,-1);///indicates which row contains the solution
    int row,col;
    for(col=0,row=0; col<m && row<n; ++col)
    {
        int sel = row;///which row contains the maximum value/
        for(int i=row+1; i<n; i++)
            if(abs(a[i][col])>abs(a[sel][col]))
                sel = i;
        if(abs(a[sel][col])<EPS) continue;///it's basically 0.
        a[sel].swap(a[row]);///taking the max row up
        where[col]=row;

        ll ni = bigmod(ll(a[row][col]), mod-2, mod);

        ld t = (ni);

        for(int i=col; i<=m; i++) {
            a[row][i]*=t;
            a[row][i]%=mod;
        }
        for(int i=0; i<n; i++)
        {
            if(i!=row)
            {
                ld c = a[i][col];
                for(int j=col; j<=m; j++) {
                    a[i][j]-=(a[row][j]*c)%mod;
                    a[i][j]+=mod;
                    a[i][j]%=mod;
                }
            }
        }
        row++;
    }


    ans.assign(m,0);
    /*
    for(int i=0;i<m;i++)
        if(where[i]!=-1)
        {

            ans[i]=a[where[i]][m]*bigmod(a[where[i]][i], mod-2, mod);
            ans[i]%=mod;
    	}

    for(int i=0;i<n;i++)
    {
        double sum = 0;
        for(int j =0;j<m;j++)
            sum+=(ans[j]*a[i][j])%mod;
        if(fabs(sum-a[i][m])>EPS) ///L.H.S!=R.H.S
            ans.clear();//No solution
    }
    * */
    return row;
}



void solve()
{
    int n;
    cin>>n;
    vector<int>v(n);

    for(int i=0; i<n; i++) cin>>v[i];

    vector<vector<int> > ara(25, vector<int> (n+1,0));
    
    
    bool f=0;

    for(int j=0; j<n; j++)
    {

        int m = v[j];
        
        ll sq = sqrt(m);
        
        f|=(sq*sq==m);
        
        for(int i=2; i*i<=m; i++)
        {
            int cnt = 0;

            while(m%i==0)
            {
                cnt++;
                m/=i;
            }
            
          
            if(cnt%2)
            {
                int pos = lower_bound(all(pr), i ) - pr.begin();
                ara[pos][j]=1;
            }

        }
        
        
      //  D(m);
        if(m!=1)
        {
            int pos = lower_bound(all(pr), m) - pr.begin();
            ara[pos][j]=1;
        }

    }



    vector<int>ans ;

    int rank = gauss(ara, ans, 2);

    //cout<<n-rank<<endl;
    
    //D(f);
    ll res = bigmod(2,n-rank, mod);
   

    if(res!=1 || f==0)
        res--;

    res%=mod;
    res+=mod;
    res%=mod;

    cout<<res<<endl;

}


int main()
{




    //calc_fact_invfact();
    fast_cin;
    si();

    //int n;

    // int t, cas=1;
    //scanf("%d", &t);
    //while(cin>>n)
    //case
    //while(t--)
    {
        //cout<<"Case "<<cas++<<": ";
        //  printf("Case %d: ", cas++);
        solve();
    }

    return 0;
}
