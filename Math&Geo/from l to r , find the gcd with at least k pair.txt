#include<bits/stdc++.h>
typedef long long ll;
#define pb           push_back
#define ff           first
#define ss           second
#define gcd(a, b)    __gcd(a, b)
#define lcm(a, b)    ((a)*((b)/gcd(a,b)))
#define all(v)       (v.begin(),v.end())
#define lllim       2147483648
#define Pi           2*acos(0.0)
#define mem(a,b)     memset(a, b, sizeof(a))
#define fill_(a,b)   fill(a,a+n,b);
#define MOD          1000000007
#define fast_cin     ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define filein       freopen("input.txt","r", stdin)
#define watch(x)   	 cerr << __LINE__ << ": " << #x << " = " << (x) << '\n'

/*------------------------------Graph Moves----------------------------*/
//const int fx[]= {+1,-1,+0,+0};
//const int fy[]= {+0,+0,+1,-1};
//const int fx[]= {+0,+0,+1,-1,-1,+1,-1,+1};  // Kings Move
//const int fy[]= {-1,+1,+0,+0,+1,+1,-1,-1}; // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move
/*---------------------------------------------------------------------*/

using namespace std;
const ll mx=10000007;

ll phi[mx+10] ;
ll store[mx+10] ;

void pre_calculation()
{
    phi[1] = 1 ;

    for(int i=2; i<=mx; i++)
    {
        if(phi[i]==0)
        {
            phi[i] = i-1 ;
            for(int j=i+i; j<=mx; j+=i)
            {
                if(phi[j]==0)
                    phi[j] = j ;
                phi[j] = phi[j] - phi[j]/i ;
            }
        }
    }

    for(int i=1; i<=mx; i++)
        store[i] = store[i-1] + phi[i] ;
}

ll phiSum(ll n)
{
    if(n<=mx)
        return store[n];
    ll ans = (n*(n+1))/2;

    ll d ;
    for(d=2; d*d<=n; d++)
        ans-=phiSum(n/d);

    for(int val=n/d; val>0; val--)
    {
        ll f = n/val ;
        ll t = f - d + 1 ;
        ans-=t*store[val];
        d  = f+1 ;
    }

    return ans ;
}

int main()
{
    pre_calculation();
    int T,cas=1;
    scanf("%d",&T);
    while( T-- )
    {
        ll n, d ;
        scanf("%lld%lld",&n,&d);

        ll l=0,r=n,ans=-1;


        ll rr=n/2;
        rr=phiSum(n/1);

        ll r1=phiSum(n/2);

        if(n==1 && d==1)
            ans=1;

        else if(d<=rr && d>r1)
        {
            ans=1;
        }
        else if(d>rr)
        {
            ans=-1;
        }
        else
        {

            while(l<r)
            {
                ll mid=(l+r)/2;

                ll res=phiSum(n/mid);

                // cout<<res<<" "<<l<<" "<<r<<" "<<mid<<endl;
                if(res<d)
                {
                    r=mid-1;
                }
                else
                {

                    ans=max(ans,mid);

                    l=mid+1;
                    //break;
                }

            }

           // cout<<" "<<ans<<endl;

            ll tt=n/ans;
            ll fun=phiSum(tt);

          //  cout<<ans<<"  g "<<fun<<endl;

            if(fun<d)
            {
                for(int i=ans-1; fun<d; i--)
                {
                    ll fun=phiSum(n/i);
                    if(fun>=d)
                    {
                        ///cout<<i<<" "<<fun<<endl;
                        ans=i;
                        break;
                    }
                }
            }

            for(int i=ans+1; fun>=d; i++)
            {
                ll fun=phiSum(n/i);
                if(fun>=d)
                {
                    ///cout<<i<<" "<<fun<<endl;
                    ans=i;
                }
                else
                    break;
            }
        }
        printf("Case %d: %lld\n",cas++,ans);
    }
    return 0;
}
